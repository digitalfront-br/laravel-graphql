"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Mutation {
    createUser(input: CreateUserInput! @spread): User @create
    updateUser(id: ID!, input: UpdateUserInput! @spread): User @update
    deleteUser(id: ID!): User @delete
    createCategory(input: CreateCategoryInput! @spread): Category @create
    updateCategory(id: ID!, input: UpdateCategoryInput! @spread): Category
        @update
    deleteCategory(id: ID!): Category @delete
    createQuestion(input: CreateQuestionInput! @spread): Question @create
    updateQuestion(id: ID!, input: UpdateQuestionInput! @spread): Question
        @update
    deleteQuestion(id: ID!): Question @delete
    createMeeting(input: CreateMeetingInput! @spread): Meeting @create
}

type Query @guard(with: ["sanctum", "api"]) {
    me: User @field(resolver: "UserQuery@me")
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    categories: [Category!]! @paginate(defaultCount: 10)
    category(id: ID @eq): Category @find
    questions: [Question!]! @paginate(defaultCount: 10)
    question(id: ID @eq): Question @find
    personValues: [PersonValue!]! @paginate(defaultCount: 10)
    personValue(id: ID @eq): PersonValue @find
    meetings: [Meeting!]! @paginate(defaultCount: 10)
    meeting(id: ID @eq): Meeting @find
}

type Mutation {
  login(email: String!, password: String!): String! @field(resolver: "AuthMutator@login")
#   logout: User @guard
}

type User {
    id: ID!
    name: String!
    phone: String!
    apiToken: String!
    email: String!
    meetings: [Meeting!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Category {
    id: ID!
    title: String!
    image: String!
    description: String!
    questions: [Question!] @hasMany
}

type Question {
    id: ID!
    title: String!
    meeting: Meeting! @belongsToMany
    category: Category! @belongsTo
}

type PersonValue {
    id: ID!
    title: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Meeting {
    id: ID!
    title: String!
    user: User! @belongsTo
    questions: [Question!]! @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateUserInput {
    name: String!
    phone: String!
    email: String!
    password: String! @hash
}

input CreateCategoryInput {
    title: String!
    description: String
}

input CreateQuestionInput {
    title: String!
    category_id: ID!
}

input CreateMeetingInput {
    title: String!
    user_id: ID!
}

input UpdateUserInput {
    name: String
    phone: String
    email: String
    password: String @hash
}

input UpdateCategoryInput {
    title: String
    description: String
}

input UpdateQuestionInput {
    title: String
    category_id: ID
}
